var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require('react');
var Formatter_1 = require('./Formatter');
var helpers_1 = require('./helpers');
helpers_1.Core.Ensure(React);
var ObjectComponent = (function (_super) {
    __extends(ObjectComponent, _super);
    function ObjectComponent() {
        _super.apply(this, arguments);
        this.state = {
            collapsed: false
        };
    }
    ObjectComponent.prototype.getObjectLength = function (object) {
        var length = 0;
        for (var key in object) {
            if (object.hasOwnProperty(key)) {
                length++;
            }
        }
        return length;
    };
    ObjectComponent.prototype.toggleCollapse = function (event) {
        this.state.collapsed = !this.state.collapsed;
        this.setState({ collapsed: this.state.collapsed });
    };
    ObjectComponent.prototype.render = function () {
        var json = this.props.json;
        var hasContents = false;
        var items = [];
        var count = this.getObjectLength(json);
        var countLoop = count;
        var collapsibleClassName = 'collapsible';
        var countClassName = 'count hide';
        var collapserClassName = 'collapser';
        if (this.state.collapsed) {
            collapsibleClassName += ' collapsed';
            countClassName = 'count';
            collapserClassName += ' collapsed';
        }
        for (var item in json) {
            countLoop--;
            hasContents = true;
            var name_1 = Formatter_1.default.htmlEncode(item);
            var content = Formatter_1.default.valueToHtml(json[item]);
            items.push((React.createElement("li", { key: countLoop }, React.createElement("span", { className: "property" }, "\"", name_1, "\""), ": ", content, countLoop != 0 ? ',' : '')));
        }
        var output = (React.createElement("div", { className: "object" }, React.createElement("span", { className: collapserClassName, onClick: this.toggleCollapse.bind(this) }, "Â "), React.createElement("span", { className: "brackets" }, '{'), React.createElement("span", { className: countClassName }, count), React.createElement("ul", { className: collapsibleClassName }, items), React.createElement("span", { className: "brackets" }, '}')));
        if (!hasContents) {
            output = (React.createElement("span", null));
        }
        return output;
    };
    return ObjectComponent;
})(React.Component);
exports.default = ObjectComponent;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9iamVjdC50cyJdLCJuYW1lcyI6WyJPYmplY3RDb21wb25lbnQiLCJPYmplY3RDb21wb25lbnQuY29uc3RydWN0b3IiLCJPYmplY3RDb21wb25lbnQuZ2V0T2JqZWN0TGVuZ3RoIiwiT2JqZWN0Q29tcG9uZW50LnRvZ2dsZUNvbGxhcHNlIiwiT2JqZWN0Q29tcG9uZW50LnJlbmRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBWSxLQUFLLFdBQU0sT0FBTyxDQUFDLENBQUE7QUFDL0IsMEJBQXNCLGFBQWEsQ0FBQyxDQUFBO0FBQ3BDLHdCQUFxQixXQUFXLENBQUMsQ0FBQTtBQUVqQyxjQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBTW5CO0lBQThCQSxtQ0FBeUJBO0lBQXZEQTtRQUE4QkMsOEJBQXlCQTtRQUUzQ0EsVUFBS0EsR0FBa0JBO1lBQzNCQSxTQUFTQSxFQUFFQSxLQUFLQTtTQUNuQkEsQ0FBQ0E7SUFnRU5BLENBQUNBO0lBOURHRCx5Q0FBZUEsR0FBZkEsVUFBZ0JBLE1BQU1BO1FBQ2xCRSxJQUFJQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNmQSxHQUFHQSxDQUFBQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNwQkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzVCQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUNiQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtJQUNsQkEsQ0FBQ0E7SUFFREYsd0NBQWNBLEdBQWRBLFVBQWVBLEtBQUtBO1FBQ2hCRyxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQTtRQUM3Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsRUFBQ0EsU0FBU0EsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDckRBLENBQUNBO0lBRURILGdDQUFNQSxHQUFOQTtRQUNJSSxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUMzQkEsSUFBSUEsV0FBV0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDeEJBLElBQUlBLEtBQUtBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2ZBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ3ZDQSxJQUFJQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUV0QkEsSUFBSUEsb0JBQW9CQSxHQUFHQSxhQUFhQSxDQUFDQTtRQUN6Q0EsSUFBSUEsY0FBY0EsR0FBR0EsWUFBWUEsQ0FBQ0E7UUFDbENBLElBQUlBLGtCQUFrQkEsR0FBR0EsV0FBV0EsQ0FBQ0E7UUFFckNBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RCQSxvQkFBb0JBLElBQUlBLFlBQVlBLENBQUNBO1lBQ3JDQSxjQUFjQSxHQUFHQSxPQUFPQSxDQUFDQTtZQUN6QkEsa0JBQWtCQSxJQUFJQSxZQUFZQSxDQUFDQTtRQUN2Q0EsQ0FBQ0E7UUFFREEsR0FBR0EsQ0FBQUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkJBLFNBQVNBLEVBQUVBLENBQUNBO1lBQ1pBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBO1lBQ25CQSxJQUFJQSxNQUFJQSxHQUFHQSxtQkFBU0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDdENBLElBQUlBLE9BQU9BLEdBQUdBLG1CQUFTQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoREEsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FDWEEsS0FBS0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsRUFBRUEsRUFBQ0EsR0FBR0EsRUFBRUEsU0FBU0EsRUFBQ0EsRUFDdENBLEtBQUtBLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLEVBQUVBLEVBQUNBLFNBQVNBLEVBQUVBLFVBQVVBLEVBQUNBLEVBQUVBLElBQUlBLEVBQUVBLE1BQUlBLEVBQUVBLElBQUlBLENBQUNBLEVBQUVBLElBQUlBLEVBQUVBLE9BQU9BLEVBQ3JGQSxTQUFTQSxJQUFJQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUM1QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDUkEsQ0FBQ0E7UUFFREEsSUFBSUEsTUFBTUEsR0FBR0EsQ0FDVEEsS0FBS0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsS0FBS0EsRUFBRUEsRUFBQ0EsU0FBU0EsRUFBRUEsUUFBUUEsRUFBQ0EsRUFDNUNBLEtBQUtBLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLEVBQUVBLEVBQUNBLFNBQVNBLEVBQUVBLGtCQUFrQkEsRUFBRUEsT0FBT0EsRUFBRUEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsRUFDMUdBLEtBQUtBLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLEVBQUVBLEVBQUNBLFNBQVNBLEVBQUVBLFVBQVVBLEVBQUNBLEVBQUVBLEdBQUdBLENBQUNBLEVBQ3pEQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUFDQSxTQUFTQSxFQUFFQSxjQUFjQSxFQUFDQSxFQUFFQSxLQUFLQSxDQUFDQSxFQUMzREEsS0FBS0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsRUFBRUEsRUFBQ0EsU0FBU0EsRUFBRUEsb0JBQW9CQSxFQUFDQSxFQUN2REEsS0FBS0EsQ0FDUkEsRUFDTEEsS0FBS0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFBQ0EsU0FBU0EsRUFBRUEsVUFBVUEsRUFBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FDNURBLENBQ0pBLENBQUNBO1FBRUZBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO1lBQ2RBLE1BQU1BLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1FBQ2pEQSxDQUFDQTtRQUVEQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtJQUNsQkEsQ0FBQ0E7SUFDTEosc0JBQUNBO0FBQURBLENBcEVBLEFBb0VDQSxFQXBFNkIsS0FBSyxDQUFDLFNBQVMsRUFvRTVDO0FBRUQsa0JBQWUsZUFBZSxDQUFDIiwiZmlsZSI6Ik9iamVjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IEZvcm1hdHRlciBmcm9tICcuL0Zvcm1hdHRlcic7XHJcbmltcG9ydCB7IENvcmUgfSBmcm9tICcuL2hlbHBlcnMnO1xyXG5pbXBvcnQgRm9ybWF0dGVyIGZyb20gJy4vZm9ybWF0dGVyJztcclxuQ29yZS5FbnN1cmUoUmVhY3QpO1xyXG5cclxuaW50ZXJmYWNlIElTdGF0ZSB7XHJcbiAgICBjb2xsYXBzZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmNsYXNzIE9iamVjdENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksIGFueT4ge1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGU6SVN0YXRlID0gPElTdGF0ZT57XHJcbiAgICAgICAgY29sbGFwc2VkOiBmYWxzZVxyXG4gICAgfTtcclxuXHJcbiAgICBnZXRPYmplY3RMZW5ndGgob2JqZWN0KSB7XHJcbiAgICAgICAgbGV0IGxlbmd0aCA9IDA7XHJcbiAgICAgICAgZm9yKGxldCBrZXkgaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBsZW5ndGgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZUNvbGxhcHNlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5jb2xsYXBzZWQgPSAhdGhpcy5zdGF0ZS5jb2xsYXBzZWQ7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29sbGFwc2VkOiB0aGlzLnN0YXRlLmNvbGxhcHNlZH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQganNvbiA9IHRoaXMucHJvcHMuanNvbjtcclxuICAgICAgICBsZXQgaGFzQ29udGVudHMgPSBmYWxzZTtcclxuICAgICAgICBsZXQgaXRlbXMgPSBbXTtcclxuICAgICAgICBsZXQgY291bnQgPSB0aGlzLmdldE9iamVjdExlbmd0aChqc29uKTtcclxuICAgICAgICBsZXQgY291bnRMb29wID0gY291bnQ7XHJcblxyXG4gICAgICAgIGxldCBjb2xsYXBzaWJsZUNsYXNzTmFtZSA9ICdjb2xsYXBzaWJsZSc7XHJcbiAgICAgICAgbGV0IGNvdW50Q2xhc3NOYW1lID0gJ2NvdW50IGhpZGUnO1xyXG4gICAgICAgIGxldCBjb2xsYXBzZXJDbGFzc05hbWUgPSAnY29sbGFwc2VyJztcclxuXHJcbiAgICAgICAgaWYodGhpcy5zdGF0ZS5jb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgY29sbGFwc2libGVDbGFzc05hbWUgKz0gJyBjb2xsYXBzZWQnO1xyXG4gICAgICAgICAgICBjb3VudENsYXNzTmFtZSA9ICdjb3VudCc7XHJcbiAgICAgICAgICAgIGNvbGxhcHNlckNsYXNzTmFtZSArPSAnIGNvbGxhcHNlZCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IobGV0IGl0ZW0gaW4ganNvbikge1xyXG4gICAgICAgICAgICBjb3VudExvb3AtLTtcclxuICAgICAgICAgICAgaGFzQ29udGVudHMgPSB0cnVlO1xyXG4gICAgICAgICAgICBsZXQgbmFtZSA9IEZvcm1hdHRlci5odG1sRW5jb2RlKGl0ZW0pO1xyXG4gICAgICAgICAgICBsZXQgY29udGVudCA9IEZvcm1hdHRlci52YWx1ZVRvSHRtbChqc29uW2l0ZW1dKTtcclxuICAgICAgICAgICAgaXRlbXMucHVzaChqc3goYFxyXG4gICAgICAgICAgICA8bGkga2V5PXtjb3VudExvb3B9PlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicHJvcGVydHlcIj5cIntuYW1lfVwiPC9zcGFuPjoge2NvbnRlbnR9XHJcbiAgICAgICAgICAgICAgICB7Y291bnRMb29wICE9IDAgPyAnLCcgOiAnJ31cclxuICAgICAgICAgICAgPC9saT5gKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgb3V0cHV0ID0ganN4KGBcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvYmplY3RcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17Y29sbGFwc2VyQ2xhc3NOYW1lfSBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxhcHNlLmJpbmQodGhpcyl9PiZuYnNwOzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImJyYWNrZXRzXCI+eyd7J308L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2NvdW50Q2xhc3NOYW1lfT57Y291bnR9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9e2NvbGxhcHNpYmxlQ2xhc3NOYW1lfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2l0ZW1zfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJicmFja2V0c1wiPnsnfSd9PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgKTtcclxuXHJcbiAgICAgICAgaWYoIWhhc0NvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIG91dHB1dCA9IGpzeChgPHNwYW4+eyB9PC9zcGFuPmApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0Q29tcG9uZW50OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==