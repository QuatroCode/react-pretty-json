var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var React = require('react');
var helpers_1 = require('./helpers');
var formatter_1 = require('./formatter');
helpers_1.Core.Ensure(React);
var ArrayComponent = (function (_super) {
    __extends(ArrayComponent, _super);
    function ArrayComponent() {
        _super.apply(this, arguments);
        this.state = {
            collapsed: false
        };
    }
    ArrayComponent.prototype.toggleCollapse = function (event) {
        this.state.collapsed = !this.state.collapsed;
        this.setState({ collapsed: this.state.collapsed });
    };
    ArrayComponent.prototype.render = function () {
        var json = this.props.json;
        var hasContents = false;
        var count = json.length;
        var countLoop = count;
        var items = json.map(function (item) {
            hasContents = true;
            var content = formatter_1.default.valueToHtml(item);
            countLoop--;
            return (React.createElement("li", { key: countLoop }, content, countLoop != 0 ? ',' : ''));
        });
        var collapsibleClassName = 'collapsible';
        var countClassName = 'count hide';
        var collapserClassName = 'collapser';
        if (this.state.collapsed) {
            collapsibleClassName += ' collapsed';
            countClassName = 'count';
            collapserClassName += ' collapsed';
        }
        //<span className="collapser">&nbsp;</span>
        var output = (React.createElement("div", { className: "array" }, React.createElement("span", { className: collapserClassName, onClick: this.toggleCollapse.bind(this) }, "Â "), React.createElement("span", { className: "brackets" }, "["), React.createElement("span", { className: countClassName }, count), React.createElement("ul", { className: collapsibleClassName }, items), React.createElement("span", { className: "brackets" }, "]")));
        if (!hasContents) {
            var output_1 = (React.createElement("span", null, "[ ]"));
        }
        return output;
    };
    return ArrayComponent;
})(React.Component);
exports.default = ArrayComponent;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFycmF5LnRzIl0sIm5hbWVzIjpbIkFycmF5Q29tcG9uZW50IiwiQXJyYXlDb21wb25lbnQuY29uc3RydWN0b3IiLCJBcnJheUNvbXBvbmVudC50b2dnbGVDb2xsYXBzZSIsIkFycmF5Q29tcG9uZW50LnJlbmRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBWSxLQUFLLFdBQU0sT0FBTyxDQUFDLENBQUE7QUFDL0Isd0JBQXFCLFdBQVcsQ0FBQyxDQUFBO0FBQ2pDLDBCQUFzQixhQUFhLENBQUMsQ0FBQTtBQUNwQyxjQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBTW5CO0lBQTZCQSxrQ0FBeUJBO0lBQXREQTtRQUE2QkMsOEJBQXlCQTtRQUUxQ0EsVUFBS0EsR0FBa0JBO1lBQzNCQSxTQUFTQSxFQUFFQSxLQUFLQTtTQUNuQkEsQ0FBQ0E7SUFxRE5BLENBQUNBO0lBbkRHRCx1Q0FBY0EsR0FBZEEsVUFBZUEsS0FBS0E7UUFDaEJFLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFNBQVNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBO1FBQzdDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxFQUFDQSxTQUFTQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxFQUFDQSxDQUFDQSxDQUFDQTtJQUNyREEsQ0FBQ0E7SUFFREYsK0JBQU1BLEdBQU5BO1FBQ0lHLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBO1FBQzNCQSxJQUFJQSxXQUFXQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUN4QkEsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDeEJBLElBQUlBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3RCQSxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFDQSxJQUFJQTtZQUN0QkEsV0FBV0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDbkJBLElBQUlBLE9BQU9BLEdBQUdBLG1CQUFTQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUMxQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7WUFDWkEsTUFBTUEsQ0FBQ0EsQ0FDSEEsS0FBS0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsRUFBRUEsRUFBQ0EsR0FBR0EsRUFBRUEsU0FBU0EsRUFBQ0EsRUFDdENBLE9BQU9BLEVBQ1BBLFNBQVNBLElBQUlBLENBQUNBLEdBQUVBLEdBQUdBLEdBQUdBLEVBQUVBLENBQzNCQSxDQUNKQSxDQUFDQTtRQUNOQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVIQSxJQUFJQSxvQkFBb0JBLEdBQUdBLGFBQWFBLENBQUNBO1FBQ3pDQSxJQUFJQSxjQUFjQSxHQUFHQSxZQUFZQSxDQUFDQTtRQUNsQ0EsSUFBSUEsa0JBQWtCQSxHQUFHQSxXQUFXQSxDQUFDQTtRQUVyQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLG9CQUFvQkEsSUFBSUEsWUFBWUEsQ0FBQ0E7WUFDckNBLGNBQWNBLEdBQUdBLE9BQU9BLENBQUNBO1lBQ3pCQSxrQkFBa0JBLElBQUlBLFlBQVlBLENBQUNBO1FBQ3ZDQSxDQUFDQTtRQUVEQSwyQ0FBMkNBO1FBQzNDQSxJQUFJQSxNQUFNQSxHQUFHQSxDQUNiQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQSxLQUFLQSxFQUFFQSxFQUFDQSxTQUFTQSxFQUFFQSxPQUFPQSxFQUFDQSxFQUMzQ0EsS0FBS0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFBQ0EsU0FBU0EsRUFBRUEsa0JBQWtCQSxFQUFFQSxPQUFPQSxFQUFFQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxFQUMxR0EsS0FBS0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFBQ0EsU0FBU0EsRUFBRUEsVUFBVUEsRUFBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsRUFDekRBLEtBQUtBLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLEVBQUVBLEVBQUNBLFNBQVNBLEVBQUVBLGNBQWNBLEVBQUNBLEVBQUVBLEtBQUtBLENBQUNBLEVBQy9EQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxFQUFFQSxFQUFDQSxTQUFTQSxFQUFFQSxvQkFBb0JBLEVBQUNBLEVBQ3ZEQSxLQUFLQSxDQUNSQSxFQUNEQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUFDQSxTQUFTQSxFQUFFQSxVQUFVQSxFQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUM1REEsQ0FDQUEsQ0FBQ0E7UUFFRkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDZEEsSUFBSUEsUUFBTUEsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsTUFBTUEsRUFBRUEsSUFBSUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDNURBLENBQUNBO1FBRURBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO0lBQ2xCQSxDQUFDQTtJQUNMSCxxQkFBQ0E7QUFBREEsQ0F6REEsQUF5RENBLEVBekQ0QixLQUFLLENBQUMsU0FBUyxFQXlEM0M7QUFFRCxrQkFBZSxjQUFjLENBQUMiLCJmaWxlIjoiQXJyYXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvcmUgfSBmcm9tICcuL2hlbHBlcnMnO1xyXG5pbXBvcnQgRm9ybWF0dGVyIGZyb20gJy4vZm9ybWF0dGVyJztcclxuQ29yZS5FbnN1cmUoUmVhY3QpO1xyXG5cclxuaW50ZXJmYWNlIElTdGF0ZSB7XHJcbiAgICBjb2xsYXBzZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmNsYXNzIEFycmF5Q29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55PiB7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0ZTpJU3RhdGUgPSA8SVN0YXRlPntcclxuICAgICAgICBjb2xsYXBzZWQ6IGZhbHNlXHJcbiAgICB9O1xyXG5cclxuICAgIHRvZ2dsZUNvbGxhcHNlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5jb2xsYXBzZWQgPSAhdGhpcy5zdGF0ZS5jb2xsYXBzZWQ7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29sbGFwc2VkOiB0aGlzLnN0YXRlLmNvbGxhcHNlZH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQganNvbiA9IHRoaXMucHJvcHMuanNvbjtcclxuICAgICAgICBsZXQgaGFzQ29udGVudHMgPSBmYWxzZTtcclxuICAgICAgICBsZXQgY291bnQgPSBqc29uLmxlbmd0aDtcclxuICAgICAgICBsZXQgY291bnRMb29wID0gY291bnQ7XHJcbiAgICAgICAgbGV0IGl0ZW1zID0ganNvbi5tYXAoKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaGFzQ29udGVudHMgPSB0cnVlO1xyXG4gICAgICAgICAgICBsZXQgY29udGVudCA9IEZvcm1hdHRlci52YWx1ZVRvSHRtbChpdGVtKTtcclxuICAgICAgICAgICAgY291bnRMb29wLS07XHJcbiAgICAgICAgICAgIHJldHVybiBqc3goYFxyXG4gICAgICAgICAgICAgICAgPGxpIGtleT17Y291bnRMb29wfT5cclxuICAgICAgICAgICAgICAgICAgICB7Y29udGVudH1cclxuICAgICAgICAgICAgICAgICAgICB7Y291bnRMb29wICE9IDA/ICcsJyA6ICcnfVxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgYCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBjb2xsYXBzaWJsZUNsYXNzTmFtZSA9ICdjb2xsYXBzaWJsZSc7XHJcbiAgICAgICAgbGV0IGNvdW50Q2xhc3NOYW1lID0gJ2NvdW50IGhpZGUnO1xyXG4gICAgICAgIGxldCBjb2xsYXBzZXJDbGFzc05hbWUgPSAnY29sbGFwc2VyJztcclxuXHJcbiAgICAgICAgaWYodGhpcy5zdGF0ZS5jb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgY29sbGFwc2libGVDbGFzc05hbWUgKz0gJyBjb2xsYXBzZWQnO1xyXG4gICAgICAgICAgICBjb3VudENsYXNzTmFtZSA9ICdjb3VudCc7XHJcbiAgICAgICAgICAgIGNvbGxhcHNlckNsYXNzTmFtZSArPSAnIGNvbGxhcHNlZCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLzxzcGFuIGNsYXNzTmFtZT1cImNvbGxhcHNlclwiPiZuYnNwOzwvc3Bhbj5cclxuICAgICAgICBsZXQgb3V0cHV0ID0ganN4KGBcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFycmF5XCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17Y29sbGFwc2VyQ2xhc3NOYW1lfSBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNvbGxhcHNlLmJpbmQodGhpcyl9PiZuYnNwOzwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYnJhY2tldHNcIj5bPC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2NvdW50Q2xhc3NOYW1lfT57Y291bnR9PC9zcGFuPlxyXG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPXtjb2xsYXBzaWJsZUNsYXNzTmFtZX0+XHJcbiAgICAgICAgICAgICAgICB7aXRlbXN9XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImJyYWNrZXRzXCI+XTwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgKTtcclxuXHJcbiAgICAgICAgaWYoIWhhc0NvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIGxldCBvdXRwdXQgPSBqc3goYDxzcGFuPlsgXTwvc3Bhbj5gKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFycmF5Q29tcG9uZW50OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==