var React = require('react');
var Object_1 = require('./Object');
var Array_1 = require('./Array');
var helpers_1 = require('./helpers');
helpers_1.Core.Ensure(React);
var Formatter = (function () {
    function Formatter() {
    }
    Formatter.prototype.htmlEncode = function (t) {
        return t != null ? t.toString().replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : '';
    };
    Formatter.prototype.decorateWithSpan = function (value, className) {
        return (React.createElement("span", { className: className }, value));
    };
    Formatter.prototype.valueToHtml = function (value) {
        var valueType = typeof value;
        var output;
        if (value == null) {
            output = this.decorateWithSpan('null', 'null');
        }
        else if (value && value.constructor == Array) {
            //output = this.arrayToHTML(value);
            output = (React.createElement(Array_1.default, { json: value }));
        }
        else if (valueType == 'object') {
            //output = this.objectToHTML(value);
            output = (React.createElement(Object_1.default, { json: value }));
        }
        else if (valueType == 'number') {
            output = this.decorateWithSpan(value, 'number');
        }
        else if (valueType == 'string') {
            if (/^(http|https):\/\/[^\s]+$/.test(value)) {
                output = (React.createElement("span", { className: "url" }, "\"", React.createElement("a", { href: value, target: "_blank" }, value), "\""));
            }
            else {
                output = this.decorateWithSpan('"' + value + '"', 'string');
            }
        }
        else if (valueType == 'boolean') {
            output = this.decorateWithSpan(value.toString(), 'bool');
        }
        return output;
    };
    return Formatter;
})();
var formatter = new Formatter();
exports.default = formatter;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZvcm1hdHRlci50cyJdLCJuYW1lcyI6WyJGb3JtYXR0ZXIiLCJGb3JtYXR0ZXIuY29uc3RydWN0b3IiLCJGb3JtYXR0ZXIuaHRtbEVuY29kZSIsIkZvcm1hdHRlci5kZWNvcmF0ZVdpdGhTcGFuIiwiRm9ybWF0dGVyLnZhbHVlVG9IdG1sIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFZLEtBQUssV0FBTSxPQUFPLENBQUMsQ0FBQTtBQUMvQix1QkFBdUIsVUFBVSxDQUFDLENBQUE7QUFDbEMsc0JBQXNCLFNBQVMsQ0FBQyxDQUFBO0FBQ2hDLHdCQUFxQixXQUFXLENBQUMsQ0FBQTtBQUNqQyxjQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRW5CO0lBQUFBO0lBd0NBQyxDQUFDQTtJQXZDR0QsOEJBQVVBLEdBQVZBLFVBQVdBLENBQUNBO1FBQ1JFLE1BQU1BLENBQUNBLENBQUNBLElBQUlBLElBQUlBLEdBQUdBLENBQUNBLENBQUVBLFFBQVFBLEVBQUVBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLEVBQUVBLE1BQU1BLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO0lBQ3JJQSxDQUFDQTtJQUVERixvQ0FBZ0JBLEdBQWhCQSxVQUFpQkEsS0FBYUEsRUFBRUEsU0FBaUJBO1FBQzdDRyxNQUFNQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUFDQSxTQUFTQSxFQUFFQSxTQUFTQSxFQUFDQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUN4RUEsQ0FBQ0E7SUFFREgsK0JBQVdBLEdBQVhBLFVBQVlBLEtBQUtBO1FBQ2JJLElBQUlBLFNBQVNBLEdBQUdBLE9BQU9BLEtBQUtBLENBQUNBO1FBQzdCQSxJQUFJQSxNQUFNQSxDQUFDQTtRQUNYQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQkEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxNQUFNQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUNuREEsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsSUFBSUEsS0FBS0EsQ0FBQ0EsV0FBV0EsSUFBSUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDM0NBLG1DQUFtQ0E7WUFDbkNBLE1BQU1BLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLGFBQWFBLENBQUNBLGVBQVNBLEVBQUVBLEVBQUNBLElBQUlBLEVBQUVBLEtBQUtBLEVBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQzdEQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxTQUFTQSxJQUFJQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM3QkEsb0NBQW9DQTtZQUNwQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsZ0JBQVVBLEVBQUVBLEVBQUNBLElBQUlBLEVBQUVBLEtBQUtBLEVBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQzlEQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxTQUFTQSxJQUFJQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM3QkEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxLQUFLQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUNwREEsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsSUFBSUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDN0JBLEVBQUVBLENBQUNBLENBQUNBLDJCQUEyQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzFDQSxNQUFNQSxHQUFHQSxDQUNMQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUFDQSxTQUFTQSxFQUFFQSxLQUFLQSxFQUFDQSxFQUFFQSxJQUFJQSxFQUFFQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxFQUFFQSxFQUFDQSxJQUFJQSxFQUFFQSxLQUFLQSxFQUFFQSxNQUFNQSxFQUFFQSxRQUFRQSxFQUFDQSxFQUFFQSxLQUFLQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUNoSUEsQ0FBQ0E7WUFDTkEsQ0FBQ0E7WUFBQUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ0hBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsR0FBR0EsR0FBR0EsS0FBS0EsR0FBR0EsR0FBR0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDaEVBLENBQUNBO1FBQ0xBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLFNBQVNBLElBQUlBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1lBQzlCQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLEVBQUVBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1FBQzdEQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtJQUNsQkEsQ0FBQ0E7SUFDTEosZ0JBQUNBO0FBQURBLENBeENBLEFBd0NDQSxJQUFBO0FBRUQsSUFBSSxTQUFTLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztBQUNoQyxrQkFBZSxTQUFTLENBQUMiLCJmaWxlIjoiRm9ybWF0dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgSnNvbk9iamVjdCBmcm9tICcuL09iamVjdCc7XHJcbmltcG9ydCBKc29uQXJyYXkgZnJvbSAnLi9BcnJheSc7XHJcbmltcG9ydCB7IENvcmUgfSBmcm9tICcuL2hlbHBlcnMnO1xyXG5Db3JlLkVuc3VyZShSZWFjdCk7XHJcblxyXG5jbGFzcyBGb3JtYXR0ZXIge1xyXG4gICAgaHRtbEVuY29kZSh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHQgIT0gbnVsbCA/IHQgLnRvU3RyaW5nKCkucmVwbGFjZSgvJi9nLCBcIiZhbXA7XCIpLnJlcGxhY2UoL1wiL2csIFwiJnF1b3Q7XCIpLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpIDogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgZGVjb3JhdGVXaXRoU3Bhbih2YWx1ZTogc3RyaW5nLCBjbGFzc05hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiBqc3goYDxzcGFuIGNsYXNzTmFtZT17Y2xhc3NOYW1lfT57dmFsdWV9PC9zcGFuPmApO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlVG9IdG1sKHZhbHVlKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlVHlwZSA9IHR5cGVvZiB2YWx1ZTtcclxuICAgICAgICBsZXQgb3V0cHV0O1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIG91dHB1dCA9IHRoaXMuZGVjb3JhdGVXaXRoU3BhbignbnVsbCcsICdudWxsJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yID09IEFycmF5KSB7XHJcbiAgICAgICAgICAgIC8vb3V0cHV0ID0gdGhpcy5hcnJheVRvSFRNTCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIG91dHB1dCA9IGpzeChgPEpzb25BcnJheSBqc29uPXt2YWx1ZX0gLz5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWVUeXBlID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIC8vb3V0cHV0ID0gdGhpcy5vYmplY3RUb0hUTUwodmFsdWUpO1xyXG4gICAgICAgICAgICBvdXRwdXQgPSBqc3goYDxKc29uT2JqZWN0IGpzb249e3ZhbHVlfSAvPmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZVR5cGUgPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgb3V0cHV0ID0gdGhpcy5kZWNvcmF0ZVdpdGhTcGFuKHZhbHVlLCAnbnVtYmVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlVHlwZSA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAoL14oaHR0cHxodHRwcyk6XFwvXFwvW15cXHNdKyQvLnRlc3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBqc3goYFxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInVybFwiPlwiPGEgaHJlZj17dmFsdWV9IHRhcmdldD1cIl9ibGFua1wiPnt2YWx1ZX08L2E+XCI8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICBgKTtcclxuICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gdGhpcy5kZWNvcmF0ZVdpdGhTcGFuKCdcIicgKyB2YWx1ZSArICdcIicsICdzdHJpbmcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZVR5cGUgPT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIG91dHB1dCA9IHRoaXMuZGVjb3JhdGVXaXRoU3Bhbih2YWx1ZS50b1N0cmluZygpLCAnYm9vbCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgfVxyXG59XHJcblxyXG5sZXQgZm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlcigpO1xyXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXI7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9